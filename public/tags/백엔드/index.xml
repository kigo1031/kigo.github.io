<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>백엔드 on Kigo's Blog - 백엔드 Java 개발자</title><link>https://kigo1031.github.io/kigo.github.io/tags/%EB%B0%B1%EC%97%94%EB%93%9C/</link><description>Recent content in 백엔드 on Kigo's Blog - 백엔드 Java 개발자</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Thu, 07 Apr 2022 05:00:00 +0000</lastBuildDate><atom:link href="https://kigo1031.github.io/kigo.github.io/tags/%EB%B0%B1%EC%97%94%EB%93%9C/index.xml" rel="self" type="application/rss+xml"/><item><title>REST API 설계 베스트 프랙티스</title><link>https://kigo1031.github.io/kigo.github.io/blog/rest-api-design/</link><pubDate>Thu, 07 Apr 2022 05:00:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/rest-api-design/</guid><description>&lt;p>잘 설계된 REST API는 개발자 경험을 향상시키고 시스템의 확장성을 보장합니다. 실제 프로젝트에서 적용할 수 있는 REST API 설계 원칙과 베스트 프랙티스를 Spring Boot 예제와 함께 알아보겠습니다.&lt;/p></description></item><item><title>Spring Boot 프로덕션 베스트 프랙티스</title><link>https://kigo1031.github.io/kigo.github.io/blog/spring-boot-best-practices/</link><pubDate>Mon, 04 Apr 2022 05:00:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/spring-boot-best-practices/</guid><description>&lt;p>프로덕션에서 안정적인 Spring Boot 애플리케이션을 만들기 위해서는 기본 기능 구현 이상의 것들이 필요합니다. 견고하고 안전하며 유지보수가 가능한 애플리케이션을 만들기 위한 필수 관례들을 알아보겠습니다.&lt;/p></description></item></channel></rss>
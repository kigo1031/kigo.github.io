<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>블로그 on Kigo's Blog - 백엔드 Java 개발자</title><link>https://kigo1031.github.io/kigo.github.io/blog/</link><description>Recent content in 블로그 on Kigo's Blog - 백엔드 Java 개발자</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Fri, 08 Aug 2025 12:00:00 +0000</lastBuildDate><atom:link href="https://kigo1031.github.io/kigo.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>이벤트 기반 아키텍처와 CQRS: 확장 가능한 시스템 설계</title><link>https://kigo1031.github.io/kigo.github.io/blog/event-driven-architecture-cqrs/</link><pubDate>Fri, 08 Aug 2025 12:00:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/event-driven-architecture-cqrs/</guid><description>&lt;p>2025년 백엔드 개발에서 이벤트 기반 아키텍처(EDA)와 CQRS(Command Query Responsibility Segregation)는 대규모 분산 시스템의 핵심 패턴이 되었습니다. 실시간 데이터 처리와 높은 확장성을 요구하는 현대 애플리케이션에 필수적인 패턴들을 실전 코드와 함께 살펴보겠습니다.&lt;/p></description></item><item><title>AI 통합 백엔드 개발: 지능형 시스템 구축</title><link>https://kigo1031.github.io/kigo.github.io/blog/ai-integrated-backend-development/</link><pubDate>Fri, 08 Aug 2025 11:00:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/ai-integrated-backend-development/</guid><description>&lt;p>2025년 백엔드 개발에서 AI 통합은 선택이 아닌 필수가 되었습니다. LLM, RAG(Retrieval-Augmented Generation), 벡터 데이터베이스를 활용한 지능형 백엔드 시스템 구축 방법을 실전 코드와 함께 살펴보겠습니다.&lt;/p></description></item><item><title>서버리스 백엔드와 엣지 컴퓨팅: 차세대 아키텍처</title><link>https://kigo1031.github.io/kigo.github.io/blog/serverless-edge-computing-backend/</link><pubDate>Fri, 08 Aug 2025 10:00:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/serverless-edge-computing-backend/</guid><description>&lt;p>2025년 백엔드 개발의 핫한 트렌드는 서버리스와 엣지 컴퓨팅의 결합입니다. 전 세계에 분산된 엣지 네트워크에서 실행되는 서버리스 함수로 지연 시간을 최소화하고 확장성을 극대화하는 방법을 살펴보겠습니다.&lt;/p></description></item><item><title>Kotlin 멀티플랫폼과 백엔드 개발: 2025년 트렌드</title><link>https://kigo1031.github.io/kigo.github.io/blog/kotlin-multiplatform-backend-integration/</link><pubDate>Fri, 08 Aug 2025 09:00:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/kotlin-multiplatform-backend-integration/</guid><description>&lt;p>2025년 백엔드 개발 트렌드 중 하나는 Kotlin 멀티플랫폼을 활용한 풀스택 개발입니다. KMM(Kotlin Multiplatform Mobile)과 Ktor를 결합하여 모바일부터 백엔드까지 하나의 언어로 개발하는 방법을 살펴보겠습니다.&lt;/p></description></item><item><title>Hugo 블로그 포스팅 완벽 가이드 - 실제 운영 경험으로 배우는 팁들</title><link>https://kigo1031.github.io/kigo.github.io/blog/hugo-blog-posting-guide/</link><pubDate>Sun, 03 Aug 2025 15:00:00 +0900</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/hugo-blog-posting-guide/</guid><description>&lt;p>Hugo 블로그를 운영하면서 겪었던 시행착오들을 바탕으로, 효율적인 포스팅 방법과 유용한 팁들을 공유해드립니다. 특히 GitHub Pages와 함께 사용하는 경우에 도움이 될 거예요.&lt;/p></description></item><item><title>Quarkus로 시작하는 Cloud Native Java 개발</title><link>https://kigo1031.github.io/kigo.github.io/blog/quarkus-cloud-native-java/</link><pubDate>Sun, 03 Aug 2025 13:00:00 +0900</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/quarkus-cloud-native-java/</guid><description>&lt;p>최근 클라우드 네이티브 환경에서 Java 애플리케이션의 한계점들이 많이 언급되고 있습니다. 특히 &lt;strong>높은 메모리 사용량&lt;/strong>과 &lt;strong>느린 시작 시간&lt;/strong> 때문에 컨테이너 환경에서는 다소 불리한 면이 있었죠. 이런 문제를 해결하기 위해 등장한 것이 바로 &lt;strong>Quarkus&lt;/strong>입니다.&lt;/p></description></item><item><title>Quarkus JPA 완전 정복 - 엔티티부터 트랜잭션까지</title><link>https://kigo1031.github.io/kigo.github.io/blog/quarkus-jpa-guide/</link><pubDate>Sun, 03 Aug 2025 10:00:00 +0900</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/quarkus-jpa-guide/</guid><description>&lt;p>Spring Boot에서 JPA를 사용하다 Quarkus로 넘어오면서 가장 궁금했던 것이 &amp;ldquo;데이터베이스 연동은 어떻게 하지?&amp;ldquo;였습니다. 다행히 Quarkus도 JPA를 완벽 지원하며, 오히려 더 간단하고 성능이 좋은 경우가 많습니다.&lt;/p></description></item><item><title>VS Code 개발 환경 최적화하기</title><link>https://kigo1031.github.io/kigo.github.io/blog/vscode-optimization/</link><pubDate>Sat, 02 Aug 2025 14:00:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/vscode-optimization/</guid><description>&lt;p>개발자에게 있어 에디터는 가장 중요한 도구 중 하나입니다. 오늘은 VS Code를 더욱 효율적으로 사용하는 방법들을 공유해보려고 합니다.&lt;/p></description></item><item><title>React 함수형 컴포넌트와 Hooks 사용법</title><link>https://kigo1031.github.io/kigo.github.io/blog/react-hooks-guide/</link><pubDate>Fri, 01 Aug 2025 16:30:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/react-hooks-guide/</guid><description>&lt;p>React 16.8에서 도입된 Hooks는 함수형 컴포넌트에서도 상태 관리와 생명주기 기능을 사용할 수 있게 해주었습니다. 오늘은 주요 Hooks들의 사용법을 알아보겠습니다.&lt;/p></description></item><item><title>Git 브랜치 전략과 협업 워크플로우</title><link>https://kigo1031.github.io/kigo.github.io/blog/git-branching-strategy/</link><pubDate>Thu, 31 Jul 2025 09:15:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/git-branching-strategy/</guid><description>&lt;p>팀 개발에서 Git을 효과적으로 사용하는 것은 매우 중요합니다. 오늘은 대표적인 Git 브랜치 전략들과 협업 워크플로우에 대해 알아보겠습니다.&lt;/p></description></item><item><title>Docker로 개발 환경 구축하기</title><link>https://kigo1031.github.io/kigo.github.io/blog/docker-development-environment/</link><pubDate>Wed, 30 Jul 2025 11:20:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/docker-development-environment/</guid><description>&lt;p>개발을 하다 보면 &amp;ldquo;내 컴퓨터에서는 잘 됐는데?&amp;ldquo;라는 말을 자주 듣게 됩니다. Docker를 사용하면 이런 문제를 해결하고 일관된 개발 환경을 구축할 수 있습니다.&lt;/p></description></item><item><title>JavaScript ES6+ 핵심 기능들</title><link>https://kigo1031.github.io/kigo.github.io/blog/javascript-es6-features/</link><pubDate>Tue, 29 Jul 2025 15:45:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/javascript-es6-features/</guid><description>&lt;p>JavaScript ES6(ECMAScript 2015)부터 많은 새로운 기능들이 추가되었습니다. 오늘은 실무에서 자주 사용되는 핵심 기능들을 알아보겠습니다.&lt;/p></description></item><item><title>REST API 설계 베스트 프랙티스</title><link>https://kigo1031.github.io/kigo.github.io/blog/rest-api-design/</link><pubDate>Thu, 07 Apr 2022 05:00:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/rest-api-design/</guid><description>&lt;p>잘 설계된 REST API는 개발자 경험을 향상시키고 시스템의 확장성을 보장합니다. 실제 프로젝트에서 적용할 수 있는 REST API 설계 원칙과 베스트 프랙티스를 Spring Boot 예제와 함께 알아보겠습니다.&lt;/p></description></item><item><title>Spring Boot를 활용한 마이크로서비스 아키텍처</title><link>https://kigo1031.github.io/kigo.github.io/blog/microservices-architecture/</link><pubDate>Wed, 06 Apr 2022 05:00:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/microservices-architecture/</guid><description>&lt;p>모놀리식 애플리케이션의 한계를 넘어 확장 가능하고 유연한 시스템을 구축하기 위해 마이크로서비스 아키텍처가 주목받고 있습니다. Spring Boot와 Spring Cloud 생태계를 활용하여 실제 운영 환경에서 사용할 수 있는 마이크로서비스를 구축하는 방법을 알아보겠습니다.&lt;/p></description></item><item><title>Java 애플리케이션을 위한 데이터베이스 설계 패턴</title><link>https://kigo1031.github.io/kigo.github.io/blog/database-design-patterns/</link><pubDate>Tue, 05 Apr 2022 05:00:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/database-design-patterns/</guid><description>&lt;p>효율적인 Java 애플리케이션 개발을 위해서는 견고한 데이터베이스 설계가 필수입니다. JPA와 Spring Data를 활용하여 성능과 유지보수성을 모두 만족하는 데이터베이스 설계 패턴들을 알아보겠습니다.&lt;/p></description></item><item><title>Spring Boot 프로덕션 베스트 프랙티스</title><link>https://kigo1031.github.io/kigo.github.io/blog/spring-boot-best-practices/</link><pubDate>Mon, 04 Apr 2022 05:00:00 +0000</pubDate><guid>https://kigo1031.github.io/kigo.github.io/blog/spring-boot-best-practices/</guid><description>&lt;p>프로덕션에서 안정적인 Spring Boot 애플리케이션을 만들기 위해서는 기본 기능 구현 이상의 것들이 필요합니다. 견고하고 안전하며 유지보수가 가능한 애플리케이션을 만들기 위한 필수 관례들을 알아보겠습니다.&lt;/p></description></item></channel></rss>